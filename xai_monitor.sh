#!/bin/bash

##########################################################################
## FOLLOW ME ON TWITTER IF YOU FIND THIS USEFUL
## @ShineCryptic
## https://twitter.com/ShineCryptic
##########################################################################

## UPDATE TELEGRAM

TELEGRAM_TOKEN="REPLACE_WITH_YOUR_TELEGRAM_BOT_TOKEN" # example 123456789:jbd78sadvbdy63d37gda37bd8
TELEGRAM_CHAT_ID="REPLACE_WITH_GROUP_CHAT_ID" # example -1234567890

## Test telegram integration by calling
## ./xai_monitor.sh --test-telegram

##########################################################################

# Configuration
LOG_FILE="screenlog.0" # Log file generated by screen -L -r xai
MAX_LOG_SIZE=500000 # Maximum log file size in bytes (e.g., 50 KB)

ERROR_PATTERNS=("Submitting assertion" "Challenge listener stopped" "Health check") # Array of error patterns


CHECK_INTERVAL=60 # Time in seconds to check if the process is running (60  = 1 minute)

start_command="./sentry-node-cli-linux"

# Function to send a message to Telegram
send_telegram_message() {
    local message=$1
    curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" -d chat_id="$TELEGRAM_CHAT_ID" -d text="$message"
}

# Function for testing Telegram message
test_telegram_message() {
    echo "Sending test message to Telegram..."
    send_telegram_message "This is a test message from the script."
    echo "Test message sent."
}

# Function to check and truncate log file
truncate_log_file() {
    if [ "$1" == "true" ]; then
        > "$LOG_FILE"
    elif [ -f "$LOG_FILE" ]; then
        local filesize=$(stat -c%s "$LOG_FILE")
        if [ $filesize -ge $MAX_LOG_SIZE ]; then
            > "$LOG_FILE"
        fi
    fi
}

# Main script
if [[ "$1" == "--test-telegram" ]]; then
    test_telegram_message
    exit 0
fi

# Background process to check if the process is running
(
    last_notification=0

    while true; do
        current_time=$(date +%s) # Get current time in seconds since epoch
        if ! pgrep -f "$start_command" > /dev/null; then
            # Check if more than an hour has passed since the last notification
            if (( current_time - last_notification > 3600 )); then
                echo "The script is not running. Sending notification to Telegram..."
                send_telegram_message "The sentry-node-cli-linux script has stopped running."
                last_notification=$current_time # Update last notification time
            fi
        fi
        sleep $CHECK_INTERVAL # Wait for the specified interval before checking again
        echo "The script is running."
    done
) &
bg_process_pid=$!

# Function to clean up background process
cleanup() {
    kill $bg_process_pid 2>/dev/null
}

# Set trap to call cleanup function on script exit
trap cleanup EXIT

# Monitor the log file
tail -Fn0 "$LOG_FILE" | \
while read line ; do
    for pattern in "${ERROR_PATTERNS[@]}"; do
        echo "$line" | grep -i "$pattern" &> /dev/null
        if [ $? = 0 ]; then
            echo "Error found: $line"
            send_telegram_message "Msg: $line"
            truncate_log_file true
            break
        fi
    done
    truncate_log_file false
done


##########################################################################
## FOLLOW ME ON TWITTER IF YOU FIND THIS USEFUL
## @ShineCryptic
## https://twitter.com/ShineCryptic
##########################################################################
